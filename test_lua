local panorama = require 'primordial/panorama-library.248'
local clipboard = require("primordial/clipboard lib.131")

json = panorama.loadstring([[
    return {
        stringify: JSON.stringify,
        parse: JSON.parse
    };
]])()


local text = menu.add_text("Info", "Welcome back "..user.name.."!\n")
local text3 = menu.add_text("Info", "This Source Was Made By hypertt#6635, Enter My Discord Server And Open Ticket If You Need Any Help.")
local discordserver = menu.add_button("Info", "Discord Server", function()
    panorama.open().SteamOverlayAPI.OpenExternalBrowserURL("https://discord.gg/He39nZg3mE")
end)

local aa = {}
local state = {"Standing", "Moving", "Air", "SlowWalk", "Crouching"}

local antiaims = menu.add_checkbox("AntiAim Options", "Turn On Conditional Anti-Aims", false)
local menu_condition  = menu.add_selection("Anti-Aim Builder", "Conditions", state) 

-- references
local jitter_add = menu.find("antiaim", "main", "angles", "jitter add")
local desync_side     = menu.find("antiaim", "main", "desync", "side") 
local Yaw_base        = menu.find("antiaim", "main", "angles", "yaw add")
local desync_amount_l = menu.find("antiaim", "main", "desync", "left amount")
local desync_amount_r = menu.find("antiaim", "main", "desync", "right amount") 
local cheat_jitter    = menu.find("antiaim", "main", "angles", "jitter mode")
local slowwalk_key    = menu.find("misc", "main", "movement", "slow walk")[2]
--

for i = 1, #state do
    aa[i] = {
        Override = menu.add_checkbox("Anti-Aim Builder", "Override "..state[i]..""),
        yaw_add_l = menu.add_slider("Anti-Aim Builder", "[".. state[i] .."] Yaw Add Left", -180, 180),
        yaw_add_r = menu.add_slider("Anti-Aim Builder", "[".. state[i] .."] Yaw Add Right", -180, 180),
        slider  = menu.add_slider("Anti-Aim Builder", "[".. state[i] .."] Centered Jitter Angle", -180, 180),
        desync_l  = menu.add_slider("Anti-Aim Builder", "[".. state[i] .."] Left Desync Amount", 0, 100),
        desync_r  = menu.add_slider("Anti-Aim Builder", "[".. state[i] .."] Right Desync Amount", 0, 100),
    }
end

menu.add_separator("Global")

-- anti aim

local stateid = 1
local jitter = 0

local main = function(cmd)

    if not antiaims:get() then
        return
    end
    
    local local_player = entity_list.get_local_player()
    
    if local_player == nil then
        return
    end

    -- stateids

    local velocity = local_player:get_prop("m_vecVelocity"):length()
    local crouch_key = input.find_key_bound_to_binding("duck")
    
    if aa[1].Override:get() and velocity == 0 then  
        stateid = 1 -- stand
    end
    if aa[2].Override:get() and velocity > 0 then
        stateid = 2 -- move
    end
    if aa[3].Override:get() and local_player:get_prop("m_vecVelocity[2]") ~= 0 then 
        stateid = 3  -- air
    end
    if aa[4].Override:get() and slowwalk_key:get() then
        stateid = 4 -- slow walk
    end
    if aa[5].Override:get() and input.is_key_held(crouch_key) then
        stateid = 5 --crouch
    end

    cheat_jitter:set(1)   --sets jitter mode to static

    local tickcount = global_vars.tick_count() % 4 > 1

    if tickcount then 
        Yaw_base:set(aa[stateid].yaw_add_l:get())
        desync_side:set(2)
    else
        Yaw_base:set(aa[stateid].yaw_add_r:get())
        desync_side:set(3)
    end

    jitter_add:set(aa[stateid].slider:get())
end



local animation_breaker = {}

animation_breaker.multiselect = menu.add_multi_selection("AntiAim Options", "Animation Breaker", {"Ground", "Air", "Zero Pitch on Land"})
animation_breaker.selectmode = menu.add_selection("AntiAim Options", "Ground Animation Mode", {"Static", "Jitter"})
animation_breaker.ground_tick = 1
animation_breaker.end_time = 0

animation_breaker.handle = function(poseparam)
    local localPlayer = entity_list.get_local_player()

    if not localPlayer then
        return
    end

    local flags = localPlayer:get_prop("m_fFlags")
    local on_land = bit.band(flags, bit.lshift(1, 0)) ~= 0
    local is_in_air = bit.band(flags, bit.lshift(1, 0)) == 0

    local curtime = global_vars.cur_time()

    if on_land == true then
        animation_breaker.ground_tick = animation_breaker.ground_tick + 1
    else
        animation_breaker.ground_tick = 0
        animation_breaker.end_time = curtime + 1
    end


    if animation_breaker.multiselect:get(1) then
        poseparam:set_render_pose(e_poses.RUN, animation_breaker.selectmode:get() == 0 and 1 or (global_vars.tick_count() % 4 == 0 and 1 or 0))
    end
    if animation_breaker.multiselect:get(2) and is_in_air then
        poseparam:set_render_pose(e_poses.JUMP_FALL, 1)
    end
    if animation_breaker.multiselect:get(3) and animation_breaker.ground_tick > 1 and animation_breaker.end_time > curtime then
        poseparam:set_render_pose(e_poses.BODY_PITCH, 0.5)
    end
end
    
local on_paint = function()
    local isAA = antiaims:get()
    local currentid = menu_condition:get()

    menu_condition:set_visible(isAA)

    for i = 1, #state do
        aa[i].Override:set_visible(isAA and currentid == i)
        aa[i].yaw_add_l:set_visible(aa[i].Override:get() and isAA and currentid == i)
        aa[i].yaw_add_r:set_visible(aa[i].Override:get() and isAA and currentid == i)
        aa[i].slider:set_visible(aa[i].Override:get() and isAA and currentid == i)
        aa[i].desync_l:set_visible(aa[i].Override:get() and isAA and currentid == i)
        aa[i].desync_r:set_visible(aa[i].Override:get() and isAA and currentid == i)
    end

    animation_breaker.multiselect:set_visible(isAA)
    animation_breaker.selectmode:set_visible(isAA and animation_breaker.multiselect:get(1))
end

local config = {}

config.codes = {'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='}

config.encode = function (str)
    local b = config.codes[1]
    return ((str:gsub('.', function(x) 
        local r,b='',x:byte()
        for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
        return r;
    end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
        if (#x < 6) then return '' end
        local c=0
        for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
        return b:sub(c+1,c+1)
    end)..({ '', '==', '=' })[#str%3+1])
end

config.decode = function (data)
    local b = config.codes[1]

    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
        return r;
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c=0
        for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
            return string.char(c)
    end))
end

config.export = menu.add_button("Config", "Export Config", function()
    local protected = function()

        local menu_items = {}

        menu_items["aa_bool"] = antiaims:get()
        menu_items["aa_condition"] = menu_condition:get()

        for i = 1, 3 do
            menu_items["animbreaker_bool_"..i..""] = animation_breaker.multiselect:get(i)
        end

        menu_items["animbreaker_select"] = animation_breaker.selectmode:get()

        for i = 1, #state do
            menu_items["aa_bool_"..state[i]..""] = aa[i].Override:get()
            menu_items["yaw_add_l_"..state[i]..""] = aa[i].yaw_add_l:get()
            menu_items["jitter_center_"..state[i]..""] = aa[i].slider:get()
            menu_items["desync_l_"..state[i]..""] = aa[i].desync_l:get()
            menu_items["desync_r_"..state[i]..""] = aa[i].desync_r:get()
        end

        local jsonraw = json.stringify(menu_items)
        local cfgencoded = config.encode(jsonraw)
        clipboard.set(cfgencoded)
        print("Exported Config To Clipboard")
    end

    local status, message = pcall(protected)

    if not status then
        print(string.format("Failed to export config:\nReason: %s\nJson: %s", message, jsonraw))
        return
    end
end)

config.import = menu.add_button("Config", "Import Config", function(text)
    local protected = function()
        local clipboard = text == nil and clipboard.get() or text

        local jsonparse = config.decode(clipboard)
        jsonparse = json.parse(jsonparse)

        antiaims:set(jsonparse["aa_bool"])
        menu_condition:set(jsonparse["aa_condition"])

        for i = 1, 3 do
            animation_breaker.multiselect:set(i, jsonparse["animbreaker_bool_"..i..""])
        end

        animation_breaker.selectmode:set(jsonparse["animbreaker_select"])

        for i = 1, #state do
            aa[i].Override:set(jsonparse["aa_bool_"..state[i]..""])
            aa[i].yaw_add_l:set(jsonparse["yaw_add_l_"..state[i]..""])
            aa[i].slider:set(jsonparse["jitter_center_"..state[i]..""])
            aa[i].desync_l:set(jsonparse["desync_l_"..state[i]..""])
            aa[i].desync_r:set(jsonparse["desync_r_"..state[i]..""])
        end
    end

    local status, message = pcall(protected)

    if not status then
        print("Failed to load config:", message)
        return
    end
end)

callbacks.add(e_callbacks.SETUP_COMMAND, main) 
callbacks.add(e_callbacks.ANTIAIM, animation_breaker.handle)
callbacks.add(e_callbacks.PAINT, on_paint)
 
