local panorama = require ("primordial/panorama-library.248")
local clipboard = require("primordial/clipboard lib.131")
local notifications = require("primordial/notification pop-up library.58")
require("primordial/UI Callbacks.198")

-- @region = Script Info

-- Owner: TiagoSuper3/Hypertt
-- Cheat: Primordial
-- Script Name: Valency
-- Version = idk

-- @end_region = Script Info


-- @region = FFI

local ffi = require "ffi"

ffi.cdef[[
    typedef int(__fastcall* clantag_t)(const char*, const char*);
]]

-- @end_region = FFI


json = panorama.loadstring([[
    return {
        stringify: JSON.stringify,
        parse: JSON.parse
    };
]])()



notifications:add_notification("Valency Anti-Aim", "Welcome Back "..user.name.."!", 4)



-- @region = Tab Alignment 

local tab_table = {"Info", "Global", "Anti Aim", "Visuals", "Misc", "Config"}
local window_select = menu.add_selection("Valency", "Tab Selection", tab_table)
menu.set_group_column("Valency", 1)

local Tab = {
    ["Global"] = {},
    ["Anti Aim"] = {},
    ["Visuals"] = {},
    ["Misc"] = {},
}



menu.set_group_column("Info", 2)




Tab["Global"]["global_bool"] = {
    var = menu.add_checkbox("Global", "Enable Global", false),
    color = false,
}
menu.add_separator("Global")
menu.set_group_column("Global", 2)
local global_bool = Tab["Global"].global_bool.var



menu.set_group_column("Anti-Aim Features", 1)
menu.set_group_column("Anti-Aim Builder", 2)



Tab["Visuals"]["visuals_bool"] = {
    var = menu.add_checkbox("Visuals", "Enable Visuals", false),
    color = false,
}
menu.add_separator("Visuals")
menu.set_group_column("Visuals", 2)
local visuals_bool = Tab["Visuals"].visuals_bool.var



Tab["Misc"]["misc_bool"] = {
    var = menu.add_checkbox("Misc", "Enable Misc", false),
    color = false,
}
menu.add_separator("Misc")
menu.set_group_column("Misc", 2)
local misc_bool = Tab["Misc"].misc_bool.var



menu.set_group_column("Config", 2)

-- @end_region = Tab Alignment 

local text = menu.add_text("Info", "Welcome back "..user.name.."!\n")
local text3 = menu.add_text("Info", "This Source Was Made By hypertt#6635, Enter My Discord Server And Open Ticket If You Need Any Help.")
local discordserver = menu.add_button("Info", "Discord Server", function()
    panorama.open().SteamOverlayAPI.OpenExternalBrowserURL("https://discord.gg/He39nZg3mE")
end)

-- temp :D
boot_anim = menu.add_checkbox("Animations", "Startup Animation", true)
--


-- references
local references = {
    jitter_add = menu.find("antiaim", "main", "angles", "jitter add"),
    desync_side = menu.find("antiaim", "main", "desync", "side"),
    yaw_add = menu.find("antiaim", "main", "angles", "yaw add"),
    l_limit = menu.find("antiaim", "main", "desync", "left amount"),
    r_limit = menu.find("antiaim", "main", "desync", "right amount") ,
    jitter_mode = menu.find("antiaim", "main", "angles", "jitter mode"),
    slowwalk_key = menu.find("misc", "main", "movement", "slow walk")[2],
    doubletap = menu.find("aimbot", "general", "exploits", "doubletap", "enable"),
}
--


-- @region = Anti Aim Builder 

    local hook_aa = {}
    local aa = {}
    local state = {"Shared", "Standing", "Moving", "Air", "SlowWalk", "Crouching"}

    local antiaims = menu.add_checkbox("Anti-Aim Builder", "Turn On Conditional Anti-Aims", false)
    local menu_condition  = menu.add_selection("Anti-Aim Builder", "Conditions", state) 

    for i = 1, #state do
        aa[i] = {
            Override = menu.add_checkbox("Anti-Aim Builder", "Override "..state[i]..""),
            yaw_add_l = menu.add_slider("Anti-Aim Builder", "[".. state[i] .."] Yaw Add Left", -180, 180),
            yaw_add_r = menu.add_slider("Anti-Aim Builder", "[".. state[i] .."] Yaw Add Right", -180, 180),
            slider  = menu.add_slider("Anti-Aim Builder", "[".. state[i] .."] Centered Jitter Angle", -180, 180),
            desync_l  = menu.add_slider("Anti-Aim Builder", "[".. state[i] .."] Left Desync Amount", 0, 100),
            desync_r  = menu.add_slider("Anti-Aim Builder", "[".. state[i] .."] Right Desync Amount", 0, 100),
        }

        aa[i].desync_l:set(100)
        aa[i].desync_r:set(100)
    end

    -- anti aim

    local jitter = 0

    hook_aa.new_condition = function(lp, cmd)
        -- stateids

        local velocity = lp:get_prop("m_vecVelocity"):length()
        
        if aa[4].Override:get() and references.slowwalk_key:get() then
            return 5 -- slow walk
        elseif aa[3].Override:get() and lp:get_prop("m_vecVelocity[2]") ~= 0 then 
            return 4  -- air
        elseif aa[5].Override:get() and lp:get_prop("m_flDuckAmount") > 0.8 then
            return 6 --crouch
        elseif aa[2].Override:get() and velocity > 2 then
            return 3 -- move
        elseif aa[1].Override:get() and velocity < 2 then  
            return 2 -- stand
        else
            return 1 -- shared
        end
    end

    hook_aa.apply_condition = function(cmd)

        if not antiaims:get() then
            return
        end

        local localplayer = entity_list.get_local_player()

        if localplayer == nil then 
            return 
        end

        local stateid = hook_aa.new_condition(localplayer, cmd)

        references.jitter_mode:set(2)

        local tickcount = global_vars.tick_count() % 4 > 1

        if tickcount then 
            references.jitter_add:set(aa[stateid].slider:get())
            references.yaw_add:set(aa[stateid].yaw_add_l:get())

            references.l_limit:set(aa[stateid].desync_l:get())
            references.r_limit:set(aa[stateid].desync_r:get())
        else
            references.jitter_add:set(aa[stateid].slider:get())
            references.yaw_add:set(aa[stateid].yaw_add_r:get())

            references.l_limit:set(aa[stateid].desync_l:get())
            references.r_limit:set(aa[stateid].desync_r:get())
        end
    end

-- @end_region = Anti Aim Builder 


-- @region = Auto Teleport In Air

    local auto_teleport = {}

    airtp_bool = menu.add_checkbox("Anti-Aim Features", "Auto Teleport In Air", false)
    airtp_mcombo = menu.add_multi_selection("Anti-Aim Features", "Teleport Weapons", {"Scout", "AWP", "Pistols", "Zeus", "Knife", "Nades", "Other"})

    auto_teleport.createmove = function()

        if not airtp_bool:get() then
            return
        end

        if not references.doubletap:get() then
            return
        end

        local Allow_Work = false
        local Need_Teleport = false

        local lp = entity_list.get_local_player()
        local Weapon = lp:get_active_weapon()

        if Weapon == nil then
            return
        end

        local WeaponID = Weapon:get_weapon_data().console_name
        
        local IsScout = WeaponID == "weapon_ssg08"
        local IsAWP = WeaponID == "weapon_awp"
        local IsPistols = Weapon:IsPistol()
        local IsZeus = WeaponID == "weapon_taser"
        local IsKnife = Weapon:IsKnife()
        local IsNades = Weapon:IsGrenade()

        for i, Weapons in pairs({
            IsScout,
            IsAWP,
            IsPistols,
            IsZeus,
            IsKnife,
            IsNades,
            not (IsScout or IsAWP or IsPistols or IsZeus or IsKnife or IsNades)
        }) do
            if (Tab["Anti Aim"].airtp_mcombo.var:Get(i) and Weapons) then
                Allow_Work = true
            end
        end

        if not Allow_Work then
            return
        end

        for _, Enemy in pairs(GetEnemies()) do

            if Enemy == nil then
                return
            end

            if (not Enemy.dormant and CanHit(Enemy)) then
                if not GetFlag(lp, 0) then
                    exploits.force_uncharge()
                end
            end

        end
    end

-- @end_region = Auto Teleport In Air


-- @region = Hitchance In Air And Hitchance On Noscope

    local hitchance = {}

    Tab["Global"]["hcair_bool"] = {var = menu.add_checkbox("Global", "Custom Air Hitchance", false),  color = false}
    Tab["Global"]["hcair_slider"] = {var = menu.add_slider("Global", "Air Hitchance", 0, 100),  color = false}
    Tab["Global"]["hcnoscope_bool"] = {var = menu.add_checkbox("Global", "Custom Noscope Hitchance", false),  color = false}
    Tab["Global"]["hcnoscope_slider"] = {var = menu.add_slider("Global", "Noscope Hitchance", 0, 100),  color = false}

    hitchance.air = function(ctx)

        if not global_bool:get() or not Tab["Global"].hcair_bool.var:get() then
            return
        end

        local localplayer = entity_list.get_local_player()

        if localplayer == nil then 
            return 
        end

        local onGround = localplayer:get_prop("m_vecVelocity[2]") == 0

        if onGround then
            return
        end

        ctx:set_hitchance(Tab["Global"].hcair_slider.var:get())
    end

    hitchance.noscope = function(ctx)
        
        if not global_bool:get() or not Tab["Global"].hcnoscope_bool.var:get() then
            return
        end

        local localplayer = entity_list.get_local_player()

        if localplayer == nil then 
            return 
        end

        local scoped = localplayer:get_prop("m_bIsScoped")

        if scoped ~= 0 then
            return
        end

        local active_weapon = localplayer:get_active_weapon()

        if active_weapon == nil then 
            return 
        end

        active_weapon = active_weapon:get_weapon_data().type

        if not active_weapon == 5 then
            return
        end

        ctx:set_hitchance(Tab["Global"].hcnoscope_slider.var:get())
    end

-- @end_region = Hitchance In Air And Hitchance On Noscope


-- @region = Clantag Changer

    local clantag = {}

    local clantag_bool = menu.add_checkbox("Misc", "Clantag", false)

    clantag.fn_change_clantag = memory.find_pattern("engine.dll", "53 56 57 8B DA 8B F9 FF 15")
    clantag.set = ffi.cast("clantag_t", clantag.fn_change_clantag)

    clantag.last_iter = -1
    clantag.string =
    {
        "v            ",
        "va           ",
        "val          ",
        "vale         ",
        "valen        ",
        "valenc       ",
        "valency      ",
        "valency.     ",
        "valency.l    ",
        "valency.lu   ",
        "valency.lua  ",
        "valency.lua   ",
        "|valency.lua ",
        "v|alency.lua ",
        "va|lency.lua ",
        "val|ency.lua ",
        "vale|ncy.lua ",
        "valen|cy.lua ",
        "valenc|y.lua ",
        "valency|.lua ",
        "valency.|lua ",
        "valency.l|ua ",
        "valency.lu|a ",
        "valency.lua| ",
        "valency.lua| ",
        "valency.lu|a ",
        "valency.l|ua ",
        "valency.|lua ",
        "valency|.lua ",
        "valenc|y.lua ",
        "valen|cy.lua ",
        "vale|ncy.lua ",
        "val|ency.lua ",
        "va|lency.lua ",
        "v|alency.lua ",
        "|valency.lua ",
        "valency.lua  ",
        "valency.lua  ",
        "valency.lua  ",
        "valency.lua  ",
        "valency.lua  ",
        "valency.lua  ",
        "valency.lua  ",
        "valency.lua  ",
        "valency.lua  ",
        "alency.lua   ",
        "lency.lua    ",
        "ency.lua     ",
        "ncy.lua      ",
        "cy.lua       ",
        "u.lua        ",
        ".lua         ",
        "lua          ",
        "ua           ",
        "a            ",
        "             ",
    }

    mod = function(a, b)
        return a - math.floor(a/b)*b
    end

    clantag.restore = menu.find("misc", "utility", "general", "clantag")
    clantag.running = false

    clantag.draw = function()
        if not clantag_bool:get() or not misc_bool:get() then
            return
        end
            
        if clantag.restore:get() then
            clantag.restore:set(false)
        end
        
        if engine.is_connected() then
            
            local raw_latency = engine.get_latency(e_latency_flows.INCOMING)

            if raw_latency == nil then 
                return
            end

            local latency = raw_latency / global_vars.interval_per_tick()
            local tickcount_pred = global_vars.tick_count() + latency
            local iter = math.floor(mod(tickcount_pred / 15.45, #clantag.string))
            
            if iter ~= clantag.last_iter then 
                clantag.running = true
                local tag = clantag.string[iter]
                clantag.set(tag, tag)
                clantag.last_iter = iter
            end
        end
    end

    clantag.clean = function()
        if not clantag.running then
            return
        end
        clantag.set("", "")
    end

    menu.add_callback(clantag_bool, function()
        clantag.clean()
    end)

-- @end_region = Clantag Changer


-- @region = Animation Breaker

    local animation_breaker = {}

    animation_breaker.multiselect = menu.add_multi_selection("Global", "Animation Breaker", {"Ground", "Air", "Zero Pitch on Land"})
    animation_breaker.ground_tick = 1
    animation_breaker.end_time = 0

    animation_breaker.handle = function(poseparam)

        local is_false = 0

        for i = 1, #animation_breaker.multiselect:get_items() do
            if not animation_breaker.multiselect:get(i) then
                is_false = is_false + 1
            end
        end

        if is_false == 3 or not global_bool:get() then
            return
        end

        local localPlayer = entity_list.get_local_player()

        if not localPlayer then
            return
        end

        local flags = localPlayer:get_prop("m_fFlags")
        local on_land = bit.band(flags, bit.lshift(1, 0)) ~= 0
        local is_in_air = bit.band(flags, bit.lshift(1, 0)) == 0

        local curtime = global_vars.cur_time()

        if on_land == true then
            animation_breaker.ground_tick = animation_breaker.ground_tick + 1
        else
            animation_breaker.ground_tick = 0
            animation_breaker.end_time = curtime + 1
        end


        if animation_breaker.multiselect:get(1) then
            poseparam:set_render_pose(e_poses.RUN, 1)
        end
        if animation_breaker.multiselect:get(2) and is_in_air then
            poseparam:set_render_pose(e_poses.JUMP_FALL, 1)
        end
        if animation_breaker.multiselect:get(3) and animation_breaker.ground_tick > 1 and animation_breaker.end_time > curtime then
            poseparam:set_render_pose(e_poses.BODY_PITCH, 0.5)
        end
    end

-- @end_region = Animation Breaker


-- @region = Config System

    local config = {}

    config.codes = {'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='}

    config.encode = function (str)
        local b = config.codes[1]
        return ((str:gsub('.', function(x) 
            local r,b='',x:byte()
            for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
            return r;
        end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
            if (#x < 6) then return '' end
            local c=0
            for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
            return b:sub(c+1,c+1)
        end)..({ '', '==', '=' })[#str%3+1])
    end

    config.decode = function (data)
        local b = config.codes[1]

        data = string.gsub(data, '[^'..b..'=]', '')
        return (data:gsub('.', function(x)
            if (x == '=') then return '' end
            local r,f='',(b:find(x)-1)
            for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
            return r;
        end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
            if (#x ~= 8) then return '' end
            local c=0
            for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
                return string.char(c)
        end))
    end

    config.export = menu.add_button("Config", "Export Config", function()
        local protected = function()

            local menu_items = {}

            menu_items["aa_bool"] = antiaims:get()
            menu_items["aa_condition"] = menu_condition:get()

            for i = 1, 3 do
                menu_items["animbreaker_bool_"..i..""] = animation_breaker.multiselect:get(i)
            end

            for i = 1, #state do
                menu_items["aa_bool_"..state[i]..""] = aa[i].Override:get()
                menu_items["yaw_add_l_"..state[i]..""] = aa[i].yaw_add_l:get()
                menu_items["yaw_add_r_"..state[i]..""] = aa[i].yaw_add_r:get()
                menu_items["jitter_center_"..state[i]..""] = aa[i].slider:get()
                menu_items["desync_l_"..state[i]..""] = aa[i].desync_l:get()
                menu_items["desync_r_"..state[i]..""] = aa[i].desync_r:get()
            end

            menu_items["username"] = user.name

            local jsonraw = json.stringify(menu_items)
            local cfgencoded = config.encode(jsonraw)
            clipboard.set(cfgencoded)

            notifications:add_notification("Valency Anti-Aim", "Exported config successfully!", 4)
            print("Exported Config To Clipboard")
        end

        local status, message = pcall(protected)

        if not status then
            notifications:add_notification("Valency Anti-Aim", "Failed to export config!", 4)
            print(string.format("Failed to export config:\nReason: %s\nJson: %s", message, jsonraw))
            return
        end
    end)

    config.import = menu.add_button("Config", "Import Config", function(text)
        local protected = function()
            local clipboard = text == nil and clipboard.get() or text

            local jsonparse = config.decode(clipboard)
            jsonparse = json.parse(jsonparse)

            antiaims:set(jsonparse["aa_bool"])
            menu_condition:set(jsonparse["aa_condition"])

            for i = 1, 3 do
                animation_breaker.multiselect:set(i, jsonparse["animbreaker_bool_"..i..""])
            end

            for i = 1, #state do
                aa[i].Override:set(jsonparse["aa_bool_"..state[i]..""])
                aa[i].yaw_add_l:set(jsonparse["yaw_add_l_"..state[i]..""])
                aa[i].yaw_add_r:set(jsonparse["yaw_add_r_"..state[i]..""])
                aa[i].slider:set(jsonparse["jitter_center_"..state[i]..""])
                aa[i].desync_l:set(jsonparse["desync_l_"..state[i]..""])
                aa[i].desync_r:set(jsonparse["desync_r_"..state[i]..""])
            end

            notifications:add_notification("Valency Anti-Aim", "Successfully loaded "..jsonparse['username'].." config!", 4)
        end

        local status, message = pcall(protected)

        if not status then
            notifications:add_notification("Valency Anti-Aim", "Failed to load config!", 4)
            print("Failed to load config:", message)
            return
        end
    end)

-- @end_region = Config System




local on_paint = function()
    local isAA = window_select:get() == 3 and antiaims:get()
    local currentid = menu_condition:get()

    for i = 1, #tab_table do

        if i == 3 then
            goto skip
        end

        menu.set_group_visibility(tab_table[i], window_select:get() == i)

        ::skip::
    end

    boot_anim:set_visible(window_select:get() == 1)

    Tab["Global"]["hcair_bool"].var:set_visible(global_bool:get())
    Tab["Global"]["hcair_slider"].var:set_visible(global_bool:get() and Tab["Global"]["hcair_bool"].var:get())
    Tab["Global"]["hcnoscope_bool"].var:set_visible(global_bool:get())
    Tab["Global"]["hcnoscope_slider"].var:set_visible(global_bool:get() and Tab["Global"]["hcnoscope_bool"].var:get())

    antiaims:set_visible(window_select:get() == 3)
    menu_condition:set_visible(isAA)

    airtp_bool:set_visible(window_select:get() == 3)
    airtp_mcombo:set_visible(window_select:get() == 3 and airtp_bool:get())

    for i = 1, #state do
        aa[i].Override:set_visible(isAA and currentid == i)
        aa[i].yaw_add_l:set_visible(aa[i].Override:get() and isAA and currentid == i)
        aa[i].yaw_add_r:set_visible(aa[i].Override:get() and isAA and currentid == i)
        aa[i].slider:set_visible(aa[i].Override:get() and isAA and currentid == i)
        aa[i].desync_l:set_visible(aa[i].Override:get() and isAA and currentid == i)
        aa[i].desync_r:set_visible(aa[i].Override:get() and isAA and currentid == i)
    end

    animation_breaker.multiselect:set_visible(global_bool:get())
    
    clantag_bool:set_visible(window_select:get() == 5 and misc_bool:get())
end




-- @region = Callbacks

    local callback = {}

    callback.hitscan = function(ctx)
        hitchance.air(ctx)
        hitchance.noscope(ctx)
    end

    callback.antiaim = function(poseparam, cmd)
        hook_aa.apply_condition(cmd)
        animation_breaker.handle(poseparam)
    end

    callback.paint = function()
        on_paint()
        clantag.draw()
    end

    callbacks.add(e_callbacks.ANTIAIM, callback.antiaim) 
    callbacks.add(e_callbacks.PAINT, callback.paint)
    callbacks.add(e_callbacks.HITSCAN, callback.hitscan)

-- @end_region = Callbacks
